var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

const urlParams = new URLSearchParams(window.location.search);
const MIRROR_MODE = getBooleanUrlParam(urlParams, 'mirrored');
const GAME_ID = urlParams.has('game_id') ? urlParams.get('game_id') : 'supportclass';
const {
  customElement,
  property
} = Polymer.decorators;

if (MIRROR_MODE) {
  document.title = `${document.title} (Mirrored)`;
}

function getBooleanUrlParam(params, paramName) {
  return params.has(paramName) && params.get(paramName) !== 'false' && params.get(paramName) !== '0';
}

const ITEM_ROWS = [[{
  name: 'hookshot'
}, {
  name: 'silvers'
}, {
  name: 'bow'
}, {
  name: 'boss0'
}], [{
  name: 'firerod'
}, {
  name: 'somaria'
}, {
  name: 'hammer'
}, {
  name: 'boss1'
}], [{
  name: 'icerod'
}, {
  name: 'byrna'
}, {
  name: 'flute'
}, {
  name: 'boss2'
}], [{
  name: 'quake'
}, {
  name: 'ether'
}, {
  name: 'bombos'
}, {
  name: 'boss3'
}], [{
  name: 'boots'
}, {
  name: 'moonpearl'
}, {
  name: 'glove',
  hasLevels: true
}, {
  name: 'boss4'
}], [{
  name: 'flippers'
}, {
  name: 'mirror'
}, {
  name: 'lantern'
}, {
  name: 'boss5'
}], [{
  name: 'powder'
}, {
  name: 'book'
}, {
  name: 'bottle',
  hasLevels: true
}, {
  name: 'boss6'
}], [{
  name: 'mushroom'
}, {
  name: 'shovel'
}, {
  name: 'net'
}, {
  name: 'boss7'
}], [{
  name: 'tunic',
  hasLevels: true
}, {
  name: 'shield',
  hasLevels: true
}, {
  name: 'sword',
  hasLevels: true
}, {
  name: 'boss8'
}], [{
  name: 'cape'
}, {
  name: 'boomerang',
  hasLevels: true
}, {
  name: 'boss10'
}, {
  name: 'boss9'
}]];
/**
 * @customElement
 * @polymer
 */

let GDQLttpTrackerElement = class GDQLttpTrackerElement extends Polymer.Element {
  /**
   * @customElement
   * @polymer
   */
  constructor() {
    super(...arguments);
    this.gameId = GAME_ID;
    this.mirrored = MIRROR_MODE;
  }

  static get observers() {
    return ['_computeItemsAndPrizes(items.*, prizes.*, medallions.*)'];
  }

  ready() {
    super.ready();
    this.$.auth.signInAnonymously().then(() => {
      nodecg.log.info('Signed in anonymously.');
    }).catch(error => {
      nodecg.log.error('Failed to sign in:', error);
    });
  }

  _computeItemsAndPrizes() {
    const finalArray = [];
    const items = this.items;
    const prizes = this.prizes;
    const medallions = this.medallions;

    if (!items || Object.keys(items).length <= 0 || !prizes || prizes.length <= 0 || !medallions || medallions.length <= 0) {
      this.itemsAndPrizes = finalArray;
      return;
    }

    ITEM_ROWS.forEach((row, rowIndex) => {
      row.forEach((item, itemIndex) => {
        const itemValue = items[item.name];

        if (itemIndex === 3) {
          // Empty placeholder for the 4th column, which is blank.
          finalArray.push({});
        }

        finalArray.push({
          name: item.name,
          hasLevels: item.hasLevels,
          level: itemValue,
          dimmed: typeof item.name === 'string' && item.name.startsWith('boss') ? itemValue === 1 : itemValue === 0 || itemValue === false
        });
      }); // Dungeon prize.

      const dungeonInfo = {
        name: 'dungeon',
        hasLevels: true,
        level: prizes[rowIndex],
        dimmed: false,
        medallionLevel: undefined
      }; // Only these two bosses have medallion info.

      if (rowIndex === 8 || rowIndex === 9) {
        dungeonInfo.medallionLevel = medallions[rowIndex];
      }

      finalArray.push(dungeonInfo);
    });
    this.itemsAndPrizes = finalArray;
  }

  _calcCellClass(itemOrPrize, index) {
    const classes = new Set(['cell']);
    const sixesRemainder = (index + 1) % 6;

    if (itemOrPrize.dimmed) {
      classes.add('cell--dimmed');
    }

    if (sixesRemainder === 0) {
      classes.add('cell--prize');
    } else if (sixesRemainder === 4) {
      classes.add('cell--zeroWidth');
    }

    return Array.from(classes).join(' ');
  }

  _calcCellSrc(itemOrPrize) {
    let src = itemOrPrize.name;

    if (itemOrPrize.hasLevels) {
      if (typeof itemOrPrize.level === 'number') {
        src = String(src) + String(itemOrPrize.level);
      } else {
        return 'blank-pixel';
      }
    }

    return src ? src : 'blank-pixel';
  }

  _hasMedallion(itemOrPrize) {
    return 'medallionLevel' in itemOrPrize && itemOrPrize.medallionLevel !== undefined;
  }

  _calcCellMedallionSrc(itemOrPrize) {
    if (itemOrPrize.name !== 'dungeon') {
      return 'blank-pixel';
    }

    return `medallion${itemOrPrize.medallionLevel}`;
  }

};

__decorate([property({
  type: Array
})], GDQLttpTrackerElement.prototype, "items", void 0);

__decorate([property({
  type: Array
})], GDQLttpTrackerElement.prototype, "prizes", void 0);

__decorate([property({
  type: Array
})], GDQLttpTrackerElement.prototype, "medallions", void 0);

__decorate([property({
  type: Array
})], GDQLttpTrackerElement.prototype, "itemsAndPrizes", void 0);

__decorate([property({
  type: String
})], GDQLttpTrackerElement.prototype, "gameId", void 0);

__decorate([property({
  type: Boolean,
  reflectToAttribute: true
})], GDQLttpTrackerElement.prototype, "mirrored", void 0);

GDQLttpTrackerElement = __decorate([customElement('gdq-lttp-tracker')], GDQLttpTrackerElement);
export default GDQLttpTrackerElement;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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